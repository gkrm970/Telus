version: "3.3"
services:

  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK-traefik-public}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    labels: []
    deploy:
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK-traefik-public}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.${STACK_NAME-tinaa}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME-tinaa}-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME-tinaa}-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.${STACK_NAME-tinaa}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.${STACK_NAME-tinaa}-www-redirect.redirectregex.replacement=https://${DOMAIN}/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-https.middlewares=${STACK_NAME-tinaa}-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
        - traefik.http.routers.${STACK_NAME-tinaa}-proxy-http.middlewares=${STACK_NAME-tinaa}-www-redirect,${STACK_NAME-tinaa}-https-redirect



  backend:
    image: '${DOCKER_IMAGE_BACKEND-backend}:${TAG-latest}'
    extra_hosts:
      abe-kafka-broker-01: "172.25.208.114"
      pltf-msgbus.develop.ocp01.toll6.tinaa.tlabs.ca: "172.25.116.204"
    ports:
      - "8088:80"
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN-localhost}
      - SERVER_HOST=https://${DOMAIN-localhost}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
      - DB_SERVER=${DB_SERVER}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - MAX_MESSAGES_TO_PUBLISH=${MAX_MESSAGES_TO_PUBLISH}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME-tinaa}-backend-http.rule=PathPrefix(`/pubsub_discoverer`)
        - traefik.http.services.${STACK_NAME-tinaa}-backend.loadbalancer.server.port=8080
    labels: []


  discovery-plugin:
    image: '${DOCKER_IMAGE_DISCOVERY_PLUGIN}:${TAG-latest}'
    extra_hosts:
      abe-kafka-broker-01: "172.25.208.114"
      pltf-msgbus.develop.ocp01.toll6.tinaa.tlabs.ca: "172.25.116.204"
    env_file:
      - .env
    environment:
      - SERVICE_PROTOCOL=${SERVICE_PROTOCOL}
      - SERVICE_HOST=${SERVICE_HOST}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_ENDPOINT=${SERVICE_ENDPOINT}
      - AUTH_TOKEN_URL=${SERVICE_AUTH_TOKEN_URL}
      - CLIENT_ID=${CLIENT_ID} 
      - CLIENT_SECRET=${CLIENT_SECRET}
    build:
      context: ./discovery-plugin
      dockerfile: discovery-plugin.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
#    deploy:
#      labels:
#        - traefik.enable=true
#        - traefik.constraint-label-stack=${TRAEFIK_TAG}
#        - traefik.http.routers.${STACK_NAME-tinaa}-backend-http.rule=PathPrefix(`/pubsub_discoverer`)
#        - traefik.http.services.${STACK_NAME-tinaa}-backend.loadbalancer.server.port=8080
#    labels: []
  
volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
